<?php

namespace App\Http\Controllers\Admin\Product;
use App\Http\Controllers\Controller;
use App\Http\Requests\Product\ProductUploadRequest;
use App\Http\Requests\Product\ProductUpdateRequest;
use App\Http\Requests\Product\SaveProductUpdateRequest;
use App\Http\Requests\Product\BulkUploadRequest;
use App\Http\Requests;
use Illuminate\Http\Request;
use View, Auth, Session;
use App\User, DB, Redirect, Image, Response, Crawler;
use App\Http\Controllers\Cron\CronController;
use App\Http\Controllers\Admin\Product\ProductHelper;
use App\Models\Product\Inventory;
use App\Models\Product\Product;
use Excel;
/*
    [code by Tarun Dhiman contact +91-9717403522 or tarun.dhiman.india@gmail.com]
*/

class ProductController extends Controller{
    
    public $data;

    public function __construct(Inventory $inventory){
        $this->data             =   array();
        $this->inventoryTable     = $inventory;
    }

    public function uploadProduct(Request $request){
        // write your code here
        $data                   =   $this->data;
        return view('admin/product/allUploadOptions',$data);
    }
    public function setDefaultImage($productid)
    {
        $productimage = DB::table('product_images')
                        ->where ('product_id', $productid)
                        ->where ('default_image', 'yes')
                        ->select('image')
                        ->first();  
        if(!empty($productimage->image)){
            return url('/product_images/50x50/'.$productimage->image);
        }else{
            return url('no_image.png');
        } 
    }
    public function index(Request $request){

        $data                   =   $this->data;
        $pr_obj                 =   new ProductHelper;
        $recoardPerpage         =   10;
        $products               =   DB::table('product')
        ->leftJoin('product_images','product_images.product_id','=','product.id')
        ->join('product_category','product_category.product_id','=','product.id');
        
        if($request->c && !is_null($request->c) && strlen($request->c)>0){
            $searchVar          =   $request->c;

            $categories         =   DB::table('category')->where('category','like','%'.$searchVar.'%')->select('id')->get();

            $searchCat          =   array();
            foreach ($categories as $category) {
                $searchCat[]    =   $category->id;
            }

            $searchProduct      =   DB::table('product_category')->whereIn('category_id',$searchCat)->groupBy('product_id')->select('product_id')->get();
            $searchPro          =   array();

            foreach ($searchProduct as $pro) {
                $searchPro[]    =   $pro->product_id;
            }

            $products           =   $products->where(function($query) use ($searchVar,$searchPro ){
                $query->where('product.product_name','like','%'.$searchVar.'%');
                $query->orWhereIn('product.id',$searchPro);
            });
        }
        
        $data['products']       =   $products->where('deleted','no')->where('product_images.default_image', 'yes')
        ->select('product.id as upc','product_images.image as product_image','product.sku','product.product_mrp','product.product_selling_price','product.product_name','product.quantity')
        ->groupBy('product.id')
        ->paginate($recoardPerpage);

        $productcategory = DB::table('product_category')
        ->leftJoin('category', 'category.id', '=', 'product_category.category_id')        
        ->select(['product_category.id', 'product_category.product_id', 'product_category.category_id', 'category.category'])
        ->where('category.deleted', 'no')
        ->get();        
        //->toSql();             dd($productcategory);
        $data['category'] = $categories = [];
        foreach ($productcategory as $key => $category) {            
            $dd[$category->product_id][]                      = $category->category;
            $data['category'][$category->product_id]          = implode(', ', $dd[$category->product_id]);
        }
        
        $data['current_page']   = $data['products']->currentPage();
        $data['index_items']    = ($recoardPerpage*$data['current_page'])-($recoardPerpage-1);
        
        return view('admin/product/show_product',$data);
    }

    public function create(Request $request){
        $data                   =   $this->data;
        $data['categories']     =   array(); //DB::table('categories')->get();
        return view('admin/product/product',$data);
    }

    public function save(ProductUploadRequest $request){
  
        foreach ($request->all() as $key => $value) {
            $$key               =   $value;
        }
        
        $dimension              =   $dimension_lenght.'x'.$dimension_width.'x'.$dimension_height;

        $substract_stock        =   ($request->substract_stock) ? 'yes' : 'no';

        $product                =   DB::table('product')->insertGetId(array(
            'product_name'                  =>  $product_name,
            'product_description'           =>  $product_desc,
            'brand'                         =>  $brand,
            'weight'                        =>  $weight,
            'dimensions'                    =>  $dimension,
            'substract_stock'               =>  $substract_stock,
            'sku'                           =>  $product_sku,
            'model'                         =>  $product_model,
            'product_mrp'                   =>  $mrp,
            'product_selling_price'         =>  $selling_price,
            'quantity'                      =>  $product_quantity,
            'meta_title'                    =>  $meta_title,
            'meta_description'              =>  $meta_decription,
            'meta_keywords'                 =>  $meta_keywords,
            'product_tags'                  =>  $product_tags,
            'isbn'                          =>  $product_isbn,
            'asin'                          =>  $product_asin,
            'ean'                           =>  $product_ean,
            'maximum_order_quantity'        =>  $maximum_order_quantity,
            'minimum_order_quantity'        =>  $minimum_order_quantity,
        ));

        if(!$product){
            return Redirect::back();
        }

        foreach ($request->category as $category) {
            DB::table('product_category')->insert(array('product_id' => $product, 'category_id' => $category));
        }

        if($request->hasFile('product_image')){
            $destination = public_path().'/product_images';

            $dim10                          =   '10x10';
            $dim20                          =   '20x20';
            $dim50                          =   '50x50';
            $dim100                         =   '100x100';
            $dim200                         =   '200x200';
            $dim300                         =   '300x300';
            $dim500                         =   '500x500';


            if(!file_exists($destination)){
                mkdir($destination);
            }

            if(!file_exists($destination.'/'.$dim10)){
                mkdir($destination.'/'.$dim10);
            }

            if(!file_exists($destination.'/'.$dim20)){
                mkdir($destination.'/'.$dim20);
            }

            if(!file_exists($destination.'/'.$dim50)){
                mkdir($destination.'/'.$dim50);
            }

            if(!file_exists($destination.'/'.$dim100)){
                mkdir($destination.'/'.$dim100);
            }

            if(!file_exists($destination.'/'.$dim200)){
                mkdir($destination.'/'.$dim200);
            }

            if(!file_exists($destination.'/'.$dim300)){
                mkdir($destination.'/'.$dim300);
            }

            
            if(!file_exists($destination.'/'.$dim500)){
                mkdir($destination.'/'.$dim500);
            }

            $image       = $request->file('product_image');
            $filename    = time().$image->getClientOriginalName();

            if($image->move($destination, $filename)){
                $uploaded                   =   $destination.'/'.$filename ;
                Image::make($uploaded)->resize(10, 10)->save($destination.'/'.$dim10.'/'.$filename);
                Image::make($uploaded)->resize(20, 20)->save($destination.'/'.$dim20.'/'.$filename);
                Image::make($uploaded)->resize(50, 50)->save($destination.'/'.$dim50.'/'.$filename);
                Image::make($uploaded)->resize(100, 100)->save($destination.'/'.$dim100.'/'.$filename);
                Image::make($uploaded)->resize(200, 200)->save($destination.'/'.$dim200.'/'.$filename);
                Image::make($uploaded)->resize(300, 300)->save($destination.'/'.$dim300.'/'.$filename);
                Image::make($uploaded)->resize(500, 500)->save($destination.'/'.$dim500.'/'.$filename);

                DB::table('product_images')->insert(array(
                    'image'         =>    $filename,
                    'default_image' =>    'yes',
                    'product_id'    =>    $product,
                ));
            }
        }

        return Redirect::back();
    }

    public function showBulkupload(Request $request){

        $data                       =   $this->data;
        return view('admin/product/bulkUpload',$data);
    }

    public function upload_by_csv(BulkUploadRequest $request){
       
        $file                       =   $request->file('product_csv');
        $file_mime_type             =   $request->product_csv->getClientMimeType();
        
        //dd($file,$file_mime_type,$file_mime_type);
        if($file_mime_type!='application/vnd.ms-excel' && $file_mime_type != 'text/excel'){
            $request->flash();
            Session::flash('incorrect_mime','the file should be an csv or xls file');
            return Redirect::back();
            exit;
        }
        
        $handle                     =   fopen($file, "r");
        $file_start                 =   false;
        $allData                    =   array();
       
        while(!feof($handle)){
            $csv                    =   fgetcsv($handle);

            if(sizeof($csv) != 12){
                continue;
            }

            if(!$file_start){
                $file_start         =   true;
                continue;
            }
$csv[3] = (int)$csv[3];
$csv[7] = (int)$csv[7];
$csv[8] = (int)$csv[8];
$csv[9] = (int)$csv[9];
            $product_name           =   $csv[0];
            $product_description    =   $csv[1];
            $product_brand          =   $csv[2];
            $product_weight         =   $csv[3];
            $product_dimension      =   $csv[4];
            $product_sku            =   $csv[5];
            $product_model          =   $csv[6];
            $product_mrp            =   $csv[7];
            $product_selling_price  =   $csv[8];
            $product_quantity       =   $csv[9];
            $product_isbn           =   $csv[10];
            $image_link             =   $csv[11];
            //var_dump($product_quantity); die;

            if( strlen($product_name)<3 
                || strlen($product_description)<3 
                || strlen($product_brand)<2 
                || !is_numeric($product_weight) 
                || strlen($product_weight)<1
                || strlen($product_sku)<1
                || strlen($product_mrp)<1
                || !is_numeric($product_mrp)
                || strlen($product_selling_price)<1
                || !is_numeric($product_selling_price)
                || !is_numeric($product_quantity)){
                continue;
            }

            $product                =   DB::table('product')->insertGetId(array(
                'product_name'                  =>  $product_name,
                'product_description'           =>  $product_description,
                'brand'                         =>  $product_brand,
                'weight'                        =>  $product_weight,
                'dimensions'                    =>  $product_dimension,
                'sku'                           =>  $product_sku,
                'model'                         =>  $product_model,
                'product_mrp'                   =>  $product_mrp,
                'product_selling_price'         =>  $product_selling_price,
                'quantity'                      =>  $product_quantity,
                'isbn'                          =>  $product_isbn,
            ));

            if(!$product){
                continue;
            }

            foreach ($request->category as $category) {
                DB::table('product_category')->insert(array('product_id' => $product, 'category_id' => $category));
            }

            if (!filter_var($image_link, FILTER_VALIDATE_URL) === false) {
                DB::table('pending_product_image')->insert(array(
                    'image_url'                 =>  $image_link,
                    'product_id'                =>  $product,
                ));
            } 
        }

        fclose($handle);
        return redirect(ADMIN_URL_PATH.'/product');
    }


    public function fetchCategory(Request $request){
        if(!$request->ajax()){
            echo 'bad request';
            exit;
        }
        $data                   =   $this->data;
        $category               =   strlen($request->category)>0 ? $request->category : 'hiphiphurrey';
        $data['results']        =   DB::table('category')->where('category','like','%'.$category.'%')->paginate(10);
        return view('admin/product/ajax/showCategory',$data);
    }

    public function setupcategory(Request $request){
        if(!$request->ajax()){
            echo 'bad request';
            exit;
        }
        $data                   =   $this->data;    
        $data['results']        =   DB::table('category')->where('id',$request->catid)->get();
        return view('admin/product/ajax/setCategory',$data);
    }

    public function uploadFromLink(Request $request){

        $data                   =   $this->data;
        return view('admin/product/uploadFromLink',$data);
    }

    /* parse from link*/
    /*public function getparse(Request $request){

        $data                   =   $this->data;

        $url                    =   $request->link;
        if(filter_var($url, FILTER_VALIDATE_URL) === false){
            echo 'Invalid Url';
            exit;
        }

        $parse_url              =   parse_url($request->link);
        if($parse_url['host'] == 'paytm.com'){
            $this->parsePaytm($url);
        }
    }*/

    /* parse paytm */

    /*public function parsePaytm($url){
        $data                   =   $this->data;
        $crawler                =   Crawler::request('GET', $url);

        $product                =   DB::table('parsed_items')->insertGetId(array());

        $data['product_title']  =   $crawler->filter('.ZGeF .K_rF .NZJI')->text();
        
        $data['product_description']    =   $crawler->filter('._2QHU a')->text();

        $data['mrp']            =   $crawler->filter('._2CkE._30zs')->text();
        $data['mrp']    = intval(preg_replace('/[^0-9]+/', '', $data['mrp']), 10);
        

        $data['selling_price']  =   $crawler->filter('._1d5g')->text();
        
        $data['selling_price']  =   intval(preg_replace('/[^0-9]+/', '', $data['selling_price']), 10);
        
        $data['product_description'] = $crawler->filter('.aile')->text();

        $data['image']          =   $crawler->filter('._1-Zc img')->attr('src');

        dd($data) ;die;
    }*/

    public function editProduct(ProductUpdateRequest $request){
        $data                   =   $this->data;

        $data['result']         =   DB::table('product')
        ->join('product_category','product_category.product_id','=','product.id')
        ->where('product.id',$request->c)
        ->select('product.id','product.product_name','product.product_description','product.brand','product.substract_stock','product.sku','product.model','product.product_mrp','product.product_selling_price','product.quantity','product.weight','product.dimensions','product.meta_title','product.meta_description','product.meta_keywords','product.product_tags','product.isbn','product.asin','product.ean','product.requires_shipping','product.maximum_order_quantity','product.minimum_order_quantity')
        ->first();

        $dimension                       =   explode('x', $data['result']->dimensions);
        $data['l']                       =   $dimension[0];
        $data['b']                       =   $dimension[1];
        $data['h']                       =   $dimension[2];

        $data['categories']              =   DB::table('product_category')->where('product_id',$data['result']->id)->get();

        foreach ($data['categories'] as $category) {
            $data['selectedCat'][$category->category_id]     =   DB::table('category')->where('id',$category->category_id)->first() ? DB::table('category')->where('id',$category->category_id)->first()->category : 0; ;
        }

        if(!$data['result']){
            return redirect(ADMIN_URL_PATH.'/product');
            exit;
        }

        return view('admin/product/edit_product', $data);
    }

    public function saveEditProduct(SaveProductUpdateRequest $request){

        foreach ($request->all() as $key => $value) {
            $$key               =   $value;
        }
        
        $dimension              =   $dimension_lenght.'x'.$dimension_width.'x'.$dimension_height;

        $substract_stock        =   ($request->substract_stock) ? 'yes' : 'no';

        $product                =   DB::table('product')->where('id',$product_id)->update(array(
            'product_name'                  =>  $product_name,
            'product_description'           =>  $product_desc,
            'brand'                         =>  $brand,
            'weight'                        =>  $weight,
            'dimensions'                    =>  $dimension,
            'substract_stock'               =>  $substract_stock,
            'sku'                           =>  $product_sku,
            'model'                         =>  $product_model,
            'product_mrp'                   =>  $mrp,
            'product_selling_price'         =>  $selling_price,
            'quantity'                      =>  $product_quantity,
            'meta_title'                    =>  $meta_title,
            'meta_description'              =>  $meta_decription,
            'meta_keywords'                 =>  $meta_keywords,
            'product_tags'                  =>  $product_tags,
            'isbn'                          =>  $product_isbn,
            'asin'                          =>  $product_asin,
            'ean'                           =>  $product_ean,
            'maximum_order_quantity'        =>  $maximum_order_quantity,
            'minimum_order_quantity'        =>  $minimum_order_quantity,
        ));

        if(!$product){
            return Redirect::back();
        }

        $categories                         =  DB::table('product_category')->where('product_id',$product_id)->delete();

        foreach ($request->category as $category) {
            DB::table('product_category')->insert(array('product_id' => $product_id, 'category_id' => $category));
        }

        return redirect(ADMIN_URL_PATH.'/product');

    }

    public function deleteProduct(ProductUpdateRequest $request){

        $product            =   DB::table('product')->find($request->c);
        if(!$product){
            return redirect(ADMIN_URL_PATH.'/product');
            exit;
        }

        $deleteProduct      =   DB::table('product')->where('id',$request->c)->update(array('deleted' => 'yes'));
        return redirect()->back();        
    }

    /*Code By Jayvardhan Mani*/
    public function productimages(Request $request)
    {        
        $data               = $this->data;     
        $data['productdata']= $product = DB::table('product')->where('id', $request->upc)->select(['id','product_name'])->first();
        
        if(isset($product->id)){
            $data['images']=   $productimage = DB::table('product_images AS p')
                                ->where('p.product_id', $request->upc)
                                ->select('p.id','p.image','p.default_image','p.product_id as upc')        
                                ->get();
            
            foreach ($productimage as $value) {                
                $chk[] = ($value->default_image == 'no') ? $value->id : 0;
            }            
            if(isset($chk) && !in_array(0,$chk,TRUE)){                
                DB::table('product_images')->where('id',$chk[0])->update(['default_image'=> 'yes']);                 
            }
            //dd($chk);
            return view(ADMIN_URL_PATH.'/product/product_images',$data);
        }else{
            return redirect(ADMIN_URL_PATH.'/product');
        }
    }
    public function ajaxcall(Request $request)
    {

       $product_images   =   DB::table('product_images')->find($request->imageid);
       if(!$product_images){
            return redirect(ADMIN_URL_PATH.'/product/product_images');
            exit;
        }
        $datareset   = DB::table('product_images')->where('product_id', $request->product_id)->update(array('default_image' => 'no'));
        $data        = DB::table('product_images')->where('id',$request->imageid)->update(array('default_image' => 'yes'));
        if($datareset){
            return Response::json(array('success' => 'true', 'msg' => 'Default Image Selected'));
        }        
    }
    /*public function imageUploadPost(Request $request)
    {        
        foreach ($request->image as $key => $productimage) {
            
           /* $this->validate($request, [
                'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            ]);*//*
            
            $imageName = time().$key.'.'.$productimage->getClientOriginalExtension();
            //pr($imageName);
            $productimage->move(public_path('product_images'), $imageName);
            DB::table('product_images')->insert(array(
                        'image'         =>    $imageName,
                        'default_image' =>    'no',
                        'product_id'    =>    $request->product_id,
                    ));
            $cron_obj = new CronController;
            $cron_obj->cropImages($imageName);
        }
        //dd("MANI");
        return back()
            ->with('success','Image Uploaded successfully.')
            ->with('path',$imageName);
    }*/
    public function imageUploadPost(Request $request)
    {
        $this->validate($request, [
            'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
        ]);

        $imageName = time().'.'.$request->image->getClientOriginalExtension();
        $request->image->move(public_path('product_images'), $imageName);
        DB::table('product_images')->insert(array(
                    'image'         =>    $imageName,
                    'default_image' =>    'no',
                    'product_id'    =>    $request->product_id,
                ));
        $cron_obj = new CronController;
        $cron_obj->cropImages($imageName);
        return back()
            ->with('success','Image Uploaded successfully.')
            ->with('path',$imageName);
    }
    public function imagescrop(Request $request)
    {        
            $data               = $this->data; 
            $data['title']      = "Crop Image";
            $data['image']=   DB::table('product_images AS p')
                                ->where('p.id', $request->id)
                                ->select('p.id','p.image','p.default_image','p.product_id')        
                                ->first();
             
            return view(ADMIN_URL_PATH.'/product/imagecrop',$data);
        
    }
    public function saveimagescrop(Request $request)
    {
        if($request->isMethod('post'))
        {
            $targ_w = $targ_h = 200;
            $jpeg_quality = 90;

            $src = $request->product_image;
            $extension   =  pathinfo($src, PATHINFO_EXTENSION);
            
            $img_r = imagecreatefrompng($src);
            $dst_r = ImageCreateTrueColor( $targ_w, $targ_h );

            imagecopyresampled($dst_r,$img_r,0,0,$request->x,$request->y,$targ_w,$targ_h,$request->w,$request->h);

            header('Content-type: image/jpeg');
            
            $crop_image = imagejpeg($dst_r,null,$jpeg_quality);
            //pr($crop_image);
            return $crop_image;
        }       
    }
    public function deleteimage(Request $request)
    {
        $id         = $request->id;
        $image      = \DB::table('product_images')->where('id', $id)->first();
        $file       = $image->image;
        //$filename   = public_path().'/product_images/'.$file;
        $dim10                          =   '10x10';
        $dim20                          =   '20x20';
        $dim50                          =   '50x50';
        $dim100                         =   '100x100';
        $dim200                         =   '200x200';
        $dim300                         =   '300x300';
        $dim500                         =   '500x500';
        \File::delete(public_path().'/product_images/'.$file);
        \File::delete(public_path().'/product_images/'.$dim10.'/'.$file);
        \File::delete(public_path().'/product_images/'.$dim20.'/'.$file);
        \File::delete(public_path().'/product_images/'.$dim50.'/'.$file);
        \File::delete(public_path().'/product_images/'.$dim100.'/'.$file);
        \File::delete(public_path().'/product_images/'.$dim200.'/'.$file);
        \File::delete(public_path().'/product_images/'.$dim300.'/'.$file);
        \File::delete(public_path().'/product_images/'.$dim500.'/'.$file);
       
        $deleted    = \DB::table('product_images')->where('id', $id)->delete();
        if (!$deleted){
            Session::flash('danger', 'ERROR deleted the File!');
            return Redirect::Back();
        }else{            
            Session::flash('success', 'Successfully deleted the File!');
            return Redirect::Back();
        }
    }
    public function inventory()
    {
        $recordPerPage      = 20;
        $data               = $this->data; 
        $data['title']      = "Manage Inventory";

        $data['products']     =  $this->inventoryTable->getAllInventoryByPage($recordPerPage);  
        return view(ADMIN_URL_PATH.'/product/inventory',$data);
    }
    public function inventoryupdate(Request $request)
    {
        if(!$request->ajax()){
            die('invalid request');
        }
        $id = $request->id;
        $newQuantity = $request->newQuantity;
        $result = $this->inventoryTable->updateInventory($id, $newQuantity); 
        return ($result) ? Response::json(array('status' => 1)) : Response::json(array('status' => 0));
    }
    /*  Import and Export Inventory in Excel*/
    public function importExport(){
        return view(ADMIN_URL_PATH.'/product/importExport');
    }
    public function downloadExcel($type){
        $result = $this->inventoryTable->getAllInventoryByPage();
        $myresult           =   array();
        foreach( $result as $key => $myarr){
            $myresult[$key]['id']   =   $myarr->id;            
            $myresult[$key]['quantity']   =   $myarr->quantity;            
        }        
       $data = $myresult;
        //dd($myresult);
        return Excel::create('product_inventory', function($excel) use ($data) {
            $excel->sheet('mySheet', function($sheet) use ($data)
            {
                $sheet->fromArray($data);
            });
        })->download($type);
    }
    public function importExcel(Request $request)
    {
        //dd($request->import_file);
        //$this->validate($request, ["import_file"  => "required| mimes:text,csv"]);
        $this->validate($request, ["import_file"  => "required"]);
        $file                       =   $request->file('import_file');
        $file_mime_type             =   $request->import_file->getMimeType();   
        if($file_mime_type!='text/plain'){
            $request->flash();
            Session::flash('incorrect_mime','The file should be an csv file');
            return Redirect::back();
            exit;
        }        
        if($request->hasFile('import_file')){
            $ext = pathinfo($request->file('import_file')->getClientOriginalName(), PATHINFO_EXTENSION);

            if(!in_array($ext, ['csv'])){
                Session::flash('incorrect_mime','The file should be an csv file');
                return Redirect::back();
                exit;
            }

            $path = $request->file('import_file')->getRealPath();
            $data = Excel::load($path, function($reader) {                
            })->get();             
            if(!empty($data) && $data->count()){                
                foreach ($data as $key => $value) {
                    //$where[] = (int)$value->id;
                    //$update[] = ['quantity' => (int)$value->quantity];
                    DB::table('selected_varient_for_product')->where('id', (int)$value->id)->update(['quantity' => (int)$value->quantity]);
                    //$update[] = "quantity => ".(int)$value->quantity;// ['quantity' => (int)$value->quantity];                   
                }
                //var_dump($update);
               //dd($where,$update);
                //DB::table('selected_varient_for_product')->whereIn('id', $where)->update($update);
               // DB::table('selected_varient_for_product')->whereIn('id', [72,73,74])->update();
            }
        }
        return Redirect::to('admin/product/inventory');
    }
    public function deleted(Request $request)
    {
        $data                   =   $this->data;
        $recoardPerpage         =   10;
        $products               =   DB::table('product')
        ->leftJoin('product_images','product_images.product_id','=','product.id')
        ->join('product_category','product_category.product_id','=','product.id');
        
        if($request->c && !is_null($request->c) && strlen($request->c)>0){
            $searchVar          =   $request->c;

            $categories         =   DB::table('category')->where('category','like','%'.$searchVar.'%')->select('id')->get();

            $searchCat          =   array();
            foreach ($categories as $category) {
                $searchCat[]    =   $category->id;
            }

            $searchProduct      =   DB::table('product_category')->whereIn('category_id',$searchCat)->groupBy('product_id')->select('product_id')->get();
            $searchPro          =   array();

            foreach ($searchProduct as $pro) {
                $searchPro[]    =   $pro->product_id;
            }

            $products           =   $products->where(function($query) use ($searchVar,$searchPro ){
                $query->where('product.product_name','like','%'.$searchVar.'%');
                $query->orWhereIn('product.id',$searchPro);
            });
        }
        
        $data['products']       =   $products->where('deleted','yes')->where('product_images.default_image', 'yes')
        ->select('product.id as upc','product_images.image as product_image','product.sku','product.product_mrp','product.product_selling_price','product.product_name','product.quantity')
        ->groupBy('product.id')
        ->paginate($recoardPerpage);

        //->toSql(); dd($data['products']);
        foreach ($data['products'] as $key => $product) {           
            $categories                                  =   DB::table('product_category')->where('product_id',$product->upc)->select('id','category_id')->get();
            $data['category'][$product->upc]                            =   '';
            foreach ($categories as $key => $category) {
                $categoryName                                     =    DB::table('category')->where('id',$category->category_id)->select('category')->first();
                $data['category'][$product->upc]                  .=    isset($categoryName->category)? $categoryName->category.',' : '';
            }
        }

        $data['current_page']   = $data['products']->currentPage();
        $data['index_items']    = ($recoardPerpage*$data['current_page'])-($recoardPerpage-1);
        return view('admin/product/deleted',$data);
    }
    public function restoreProduct(Request $request)
    {
        $product                            =   DB::table('product')->find($request->c);
        if(!$product){
            return redirect(ADMIN_URL_PATH.'/product');
            exit;
        }
        $product                      =   DB::table('product')->where('id',$request->c)->update(array('deleted' => 'no'));        
        return redirect()->back()->with(['success' => 'Product Restored Successfully.']); 
    }
    public function permanentDeleteProduct(Request $request, $id)
    {        
        $products = Product::where('id', $id)->where('deleted', 'yes')->first();
            //dd(!$products);
        if(!$products){
            return redirect()->back()->with(['danger'=> 'Product not found.']);
            exit;
        }
        $deleteProduct = Product::where('id', $id)->where('deleted', 'yes')->delete($id);   //Delete Product  
        if($deleteProduct){
            $pr_obj = new ProductHelper;
            $deleted = $pr_obj->productImageDelete($id);
            return redirect()->back()->with(['success' => 'Product Deleted Permanentally.']);     
        }else{
            return redirect()->back()->with(['danger'=> 'Something were wrong.']);
        }
        
    }

}
